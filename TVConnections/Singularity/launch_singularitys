#!/bin/bash

NUM=${1:-1}
DATE=${2:-'1970-01-01_00-00-00'}
DIR=${3:-/dockerspace}
SINGULARITY_NAME=${4:-ubuntu18_icewm.sif}
#REF_CAS=${1:-1@1970-01-01_00-00-00@/dockerspace@mageianvidia}
GPU_FILE=${5:-list_hostsgpu}
FRONTENDIP=${6:-"frontend:192.168.0.254"}
TILEDVIZ_DIR=${7:-"/TiledViz"}
TILESINGULARITYS_path=${8:-"/TiledViz/TVConnections/Singularity"}
TileSetPort=${9:-55555}
#Python server is on HPC FRONTEND
FRONTEND=${10:-"192.168.0.1"}

shift 10
OPTIONS="$@"
echo "OPTIONS = "${OPTIONS}

#echo  $REF_CAS | sed -e 's&\([^@]*\)@\([^@]*\)@\([^@]*\)@\([^@]*\)&export NUM=\1; export DATE=\2; export DIR=\3; export SINGULARITY_NAME=\4&' 
#eval $( echo  $REF_CAS | sed -e 's&\([^@]*\)@\([^@]*\)@\([^@]*\)@\([^@]*\)&export NUM=\1; export DATE=\2; export DIR=\3; export SINGULARITY_NAME=\4&' )

# FRONTENDIP is for ssh tunneling of vnc flux 
SINGULARITYOPTIONS="-r 1920x1080 -p ${TileSetPort} -h ${FRONTEND} "


# Minimal size of output for singularity container correctly started :
SINGULARITYsize=200
#TODO better get SINGULARITY response for real start rather than SINGULARITYsize

echo "launch singularitys at ${DATE}"

# Nvidia or Nouveau driver
TestNVIDIA=""

# count X display on each host
declare -A HostX

i=1
while [ $i -le ${NUM} ]; do
   HOSTCOMMAND=""
   NVIDIAGPU=0
   DEVICESCOMM=""
   DEVICES=""
   if [[ -f ${GPU_FILE} ]]; then
       line=$( sed -n "$i p" ${GPU_FILE} )
       realhost=${line% *}
       thishost=$( echo ${realhost}  | sed -e 's/-/_/g' )
       NVIDIAGPU=${line/* /}
       GPUfile=/dev/nvidia${NVIDIAGPU}
       if [ ${realhost} = $( hostname ) -o ${realhost} = "localhost" ]; then
	   HOSTCOMMAND=
	   #HOSTCOMMAND="ssh -x localhost "
	   # Nvidia or Nouveau driver
	   if [ -e $GPUfile ]; then
	       TestNVIDIA[${realhost},${NVIDIAGPU}]=true
	   else
	       TestNVIDIA[${realhost},${NVIDIAGPU}]=false
	   fi
	   if ( ${TestNVIDIA[${realhost},${NVIDIAGPU}]} ); then
	       GID=$(echo $GPUfile | sed -e "s&.*nvidia&&")
	       DEVICESCOMM=" CUDA_VISIBLE_DEVICES=$GID "
	       #DEVICES="--device=$GPUfile:/dev/nvidia0 --device=/dev/nvidiactl"
	       DEVICES=" --nv "
	   else
	       DEVICES=""
	   #     DEVICES="--device=/dev/video0:/dev/video0"
	   fi
	   BEG="'"
	   END="'"
       else
	   HOSTCOMMAND="ssh -x $LOGNAME@${realhost}"
	   # Nvidia or Nouveau driver
	   TestNVIDIA[${realhost},${NVIDIAGPU}]=$( $HOSTCOMMAND bash -c "'[[ -e $GPUfile ]] && echo true || echo false'" )
	   
	   if ( ${TestNVIDIA[${realhost},${NVIDIAGPU}]} ); then
	       GID=$(echo $GPUfile | sed -e "s&.*nvidia&&")
	       DEVICESCOMM=" CUDA_VISIBLE_DEVICES=$GID "
	       #--device=$GPUfile:/dev/nvidia0 --device=/dev/nvidiactl"
	       # => depending on SSH server configuration (e.g. AcceptEnv)
	       DEVICES=" --nv "
	   else
	       DEVICES=""
	   fi
	   BEG="'\""
	   END="\"'"
       fi
       if [ ${#HostX[${realhost}]} != 0 ]; then
	   HostX[${realhost}]=$(( HostX[${realhost}] + 1 ))
       else
	   # max is 19 for DISPLAY
	   # displays 0-1 for user needs
	   # => 2-19 for singularitys
	   HostX[${realhost}]=2
       fi
       DISPLAY=${HostX[${realhost}]}
   fi
   
   i0=$(printf "%03d" $i)
   SINGULARITYID=${i0}
   HOSTCOMMAND="$HOSTCOMMAND ${DEVICESCOMM} SINGULARITYID=${SINGULARITYID} bash -c $BEG"

   SINGULARITY="$HOSTCOMMAND singularity"

   SINGULARITYDIR=$(basename ${SINGULARITY_NAME}| sed -e 's/\.sif//')_${DATE}_${i0}
   mkdir ${DIR}/${SINGULARITYDIR}
   mkdir ${DIR}/${SINGULARITYDIR}/tmp

   
   # if [ ${network} = X ] || [ ${domain} = 0 ] ; then
   #     NETARGS=
   # else
   #     NETARGS=' --net  --network-args portmap="'${nethost}${i0}':5902/tcp,22:22/tcp"'
   #     #' --network='${network}' --network-alias='${nethost}${i0}
   #     #' --ip='${domain}'.'$((i+init_IP-1))
   # fi

   
   echo "${SINGULARITY} exec ${DEVICES} \
       --bind ${DIR}/${SINGULARITYDIR}:${HOME}/.vnc:rw,${DIR}/${SINGULARITYDIR}/tmp:/tmp:rw,${TILEDVIZ_DIR}:/TiledViz:ro,${TILESINGULARITYS_path}:/opt/TiledViz:ro,${HOME}:/home/myuser:rw${OPTIONS} \
        ${SINGULARITY_NAME} ${TILESINGULARITYS_path}/script_icewm  $SINGULARITYID ${DISPLAY} ${SINGULARITYOPTIONS} 2>&1 |tee -a ${DIR}/${SINGULARITYDIR}/stdout $END" > ${DIR}/${SINGULARITYDIR}/call_singularity-run

   #TODO
   #   -v /usr/share/X11/locale:/usr/share/X11/locale:ro  \

   chmod a+x  ${DIR}/${SINGULARITYDIR}/call_singularity-run

   ${DIR}/${SINGULARITYDIR}/call_singularity-run > ./${SINGULARITYDIR}_stdout 2>&1 &
   sleep 1

   i=$(( i + 1 ))
done
sleep 5

count=0
while [ true ]; do
    SINGULARITYDIR=$(basename ${SINGULARITY_NAME} | sed -e 's/\.sif//')_${DATE}
    NstartSingularity=$(wc -c  ./${SINGULARITYDIR}_*_stdout |head -n ${NUM} |awk '{print ($1 >= '$SINGULARITYsize')}' |grep 1 |wc -l)
    #echo "Number of started Singularitys=${NstartSingularity}"
    if [ ${NstartSingularity} -eq ${NUM} ]; then
	break
    elif [ $count -gt 100 ]; then
	echo "Error launch singularity : time_out"
	exit 100
    fi
    count=$(( count + 1 ))
    sleep 1
done
#TODO better get SINGULARITY response for real start rather than SINGULARITYsize:
#??

rm -f ./list_dockers_pass
touch ./list_dockers_pass
i=1
LISTE=""
while [ $i -le ${NUM} ]; do
   i0=$(printf "%03d" $i)
   realhost=localhost
   if [[ -f ${GPU_FILE} ]]; then
       line=$( sed -n "$i p" ${GPU_FILE} )
       realhost=${line% *}
   fi
   SINGULARITYDIR=$(basename ${SINGULARITY_NAME}| sed -e 's/\.sif//')_${DATE}_${i0}
   DISPLAYNUM=$( grep  "^:[0-9]*" ./${SINGULARITYDIR}_stdout | sed -e "s/://" )
   LIGNE=$( grep "Random\ Password\ Generated:" ./${SINGULARITYDIR}_stdout )
   PASS=${LIGNE##*:}
   echo $i ${DISPLAYNUM} ${PASS}
   LISTE="${LISTE} ${DISPLAYNUM}"

   echo ${realhost} ${PASS} | sed -e "s/\r//" >> ./list_dockers_pass

   # Remove ssh process
   #pgrep -fla  "ssh.*${realhost} .*singularity exec .*${SINGULARITYDIR}" |sed -e 's@\([0-9]*\) .*@\1@'
   OUTssh=$(pgrep -fla  "ssh.*${realhost} .*singularity exec .*${SINGULARITYDIR}" |sed -e 's@\([0-9]*\) .*@\1@')
   if [ X"${OUTssh[@]}" != X"" ] && [ ${#OUTssh[@]} -gt 0 ]; then
       echo ${OUTssh[@]}
       echo ${OUTssh[@]}  |xargs kill
   fi
   #rm ./${SINGULARITYDIR}_stdout

   i=$(( i + 1 ))
done

echo  ${NUM} ${DATE} ${DIR} ${SINGULARITY_NAME} > out_launch_singularitys
echo ${LISTE} >> out_launch_singularitys
